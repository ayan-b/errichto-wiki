{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is wiki for my streams and videos. Choose a page from the menu on the right. February 3, 2020 \u00b6 I'm back to streaming. It's Monday today and I'm doing a 5-hour Boring Programming Stream. You can watch me on YT or Twitch: https://youtube.com/errichto2 & https://www.twitch.tv/errichto . My two next streams will be Atcoder problem-solving: * easy Atcoder problems on Thursday 6, check start in your timezone * hard Atcoder problems on Monday 10","title":"Home"},{"location":"#february-3-2020","text":"I'm back to streaming. It's Monday today and I'm doing a 5-hour Boring Programming Stream. You can watch me on YT or Twitch: https://youtube.com/errichto2 & https://www.twitch.tv/errichto . My two next streams will be Atcoder problem-solving: * easy Atcoder problems on Thursday 6, check start in your timezone * hard Atcoder problems on Monday 10","title":"February 3, 2020"},{"location":"Coding-interviews/","text":"Coding interview questions (Leetcode, top questions) \u00b6 For Two Sum, it's better to find pairs as we go, instead of putting everything into a set and then doing something. This way it's easy to forbid taking the same element twice. For \"delete a node in a linked list\", give both pointer to the head and pointer to a node that should be deleted. And a bonus question is solve a problem in O(1) time. Categories \u00b6 Implement / warm-up map, set, hashset Time and memory complexity Arrays Strings Sliding window, two pointers Recursion backtracking DS stack queue linked list Sorting and searching In-place Greedy DP Fibonacci, Stairs (1 or 2 steps; 1,2,3 steps; 1-K steps, also in O(N) instead of O(N*K)) min-path in a grid coin change knapsack splitting a sequence into parts dp on DAG's Math Bit manipulation Hashing, hash table DS again trees TRIE heap Graphs Divide&conquer Probability, randomization Problems \u00b6 N-1 distinct numbers from 1 to N, one is missing. Find it. XOR or rearranging the numbers. All duplicates but one. Find that single number. Two missing numbers from 1 to N. Find them. 2-sum, 3-sum. Get a random number from a stream. Do it in-place. Simulate rand(1,5) with rand(1, 7). Simulate rand(1, 7) with rand(1, 5). Simulate a fair coin with a spoiled coin. How do you swap two numbers without using the third variable? How do you check if two rectangles overlap with each other? Huge list: https://www.geeksforgeeks.org/must-do-coding-questions-for-companies-like-amazon-microsoft-adobe/","title":"Coding interviews"},{"location":"Coding-interviews/#coding-interview-questions-leetcode-top-questions","text":"For Two Sum, it's better to find pairs as we go, instead of putting everything into a set and then doing something. This way it's easy to forbid taking the same element twice. For \"delete a node in a linked list\", give both pointer to the head and pointer to a node that should be deleted. And a bonus question is solve a problem in O(1) time.","title":"Coding interview questions (Leetcode, top questions)"},{"location":"Coding-interviews/#categories","text":"Implement / warm-up map, set, hashset Time and memory complexity Arrays Strings Sliding window, two pointers Recursion backtracking DS stack queue linked list Sorting and searching In-place Greedy DP Fibonacci, Stairs (1 or 2 steps; 1,2,3 steps; 1-K steps, also in O(N) instead of O(N*K)) min-path in a grid coin change knapsack splitting a sequence into parts dp on DAG's Math Bit manipulation Hashing, hash table DS again trees TRIE heap Graphs Divide&conquer Probability, randomization","title":"Categories"},{"location":"Coding-interviews/#problems","text":"N-1 distinct numbers from 1 to N, one is missing. Find it. XOR or rearranging the numbers. All duplicates but one. Find that single number. Two missing numbers from 1 to N. Find them. 2-sum, 3-sum. Get a random number from a stream. Do it in-place. Simulate rand(1,5) with rand(1, 7). Simulate rand(1, 7) with rand(1, 5). Simulate a fair coin with a spoiled coin. How do you swap two numbers without using the third variable? How do you check if two rectangles overlap with each other? Huge list: https://www.geeksforgeeks.org/must-do-coding-questions-for-companies-like-amazon-microsoft-adobe/","title":"Problems"},{"location":"Current-notes/","text":"Any links for 100k stream will be posted here. P1: https://codeforces.com/contest/1335/problem/F P2: https://www.codechef.com/APRIL20B/problems/FCTRE P3: Code Jam 1A p1, https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b3034 P4: Code Jam 1A p3, https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1355 codingame: https://www.codingame.com/clashofcode/clash/11857175699c47fc2c86f16b9e86a4afd5791ae new private link: https://www.codingame.com/clashofcode/clash/11857228415adbe5463375fbb0bdd07af422e05 new new private link: https://www.codingame.com/clashofcode/clash/1185729ad970eedc678b4f1d0ff01fa0c0153fe newest: https://www.codingame.com/clashofcode/clash/1185737a73a1ed6225514317c20247cec7c02c8 voting: https://poll.ly/#/P7Rg6znK new voting: https://poll.ly/#/G4kWK0yL last clash: https://www.codingame.com/clashofcode/clash/11857574520cafff72eb3006288a885acf45d95 clash with guests: https://www.codingame.com/clashofcode/clash/11857649a0f28ee7aceb73baad1319088c3695a clash with guests 2: https://www.codingame.com/clashofcode/clash/11857713a344321e5148c4bd9f8d34355be6abf P5: https://codeforces.com/problemset/problem/1334/E","title":"Current notes"},{"location":"DP-lecture/","text":"Dynamic programming lecture - how to approach a problem? \u00b6 DP 1 \u00b6 Say that this lecture we'll solve Fibonacci, stairs and min-path in a grid. We'll think which method is better to learn: iterative or resursive. Then harder problems in next lectures. Each lecture is some theory and some problems. A DP is an algorithmic technique which is usually based on a recurrent formula and one (or some) starting states. A sub-solution of the problem is constructed from previously found ones. DP solutions have a polynomial complexity which assures a much faster running time than other techniques like backtracking, brute-force etc. (that was a quote by Dumitru from TC). Most DP problems are about optimizing (min or max) certain value/quantity or about counting something, e.g. the number of ways to get from one vertex to the other, or the number of ways to write N as a sum of smaller values. We can also use it to check if something is possible and report YES/NO. In case of optimization or YES/NO problems, you should often consider a greedy approach first. It might give you a much easier solution but it's viable only in some problems and the correctness is often hard to prove. Some problems are a mix of two. The example is max-subarray sum (Kadane\u2019s algorithm). Wikipedia says that one of the reasons the word \"dynamic\" was used is that \"it sounded impressive\". Why iterative (bottom-up) over recursion (top-down)? ( https://www.quora.com/Are-there-any-good-resources-or-tutorials-for-dynamic-programming-DP-besides-the-TopCoder-tutorial/answer/Michal-Danil%C3%A1k?share=1&srid=3OBi ) iteration is much faster than recursion one can easily see time and space complexity of the algorithm source code is short and clean It allows some more complicated techniques in harder problems, like prefix sums and segment trees. Sometimes recursion is better Visiting too many states. Given N, you can repeatedly divide it by 2 or 3. Count something? Recursion will get to some states only. When it's hard to figure out the order, e.g. in graphs. For DAG's, you can do topo-sort first. Fibonacci ( https://leetcode.com/problems/fibonacci-number/ ). This is similar to problems about \"counting ways\" but it's easier because we're just given the formula to use. Make a drawing (tree). Mention O(1) space solution. Mention factorial. Say something about overlapping subproblems and explain why DP isn't needed for factorial. Stairs: count ways to get from step 1 to N, if you can jump to one of next \u2154 steps ( https://leetcode.com/problems/climbing-stairs/ ). What if we can make at most K jumps? K is given, K <= N. Min path from top-left to bottom-right corner in a grid link: https://leetcode.com/problems/minimum-path-sum/ counting version: https://leetcode.com/problems/unique-paths/ What were base cases in those problems? DP 2 \u00b6 Given some numbers like {1, 3, 5} or {1, 2, 3}, we need to tell the total number of ways we can form a number 'N' using the sum of the given three numbers, allowing repetitions and different arrangements. https://leetcode.com/problems/combination-sum-iv/ Coin change the minimum number of coins used ( https://leetcode.com/problems/coin-change/ ) the number of ways ( https://leetcode.com/problems/coin-change-2/ ) Forward vs. pull-from-previous dp (TODO: what's the proper name?) Dp 3 - wines \u00b6 A line of N wines, i-th with (the default/starting) price p[i]. You can sell leftmost or rightmost. The j-th sell gives j*p[i] money. Find the optimal order. solution I - dp[L][R] is the best score of remaining interval [L, R]. We know which year it is already. solution II - dp[L][R] is the best score so far, outside of interval [L, R]. solution III - dp[L][R] is the best score for interval [L, R] as if it was the whole sequence. DP 3.2 \u00b6 A line of N wines, i-th with (the default/starting) price p[i]. You can sell leftmost or rightmost. The j-th sell gives j*p[i] money. Find the optimal order. We can either define dp[L][R] as the best score so far or the best score for the remaining interval [L, R]. Think what is important after making some decisions. https://www.quora.com/Are-there-any-good-resources-or-tutorials-for-dynamic-programming-DP-besides-the-TopCoder-tutorial/answer/Michal-Danil%C3%A1k?share=1&srid=3OBi https://www.geeksforgeeks.org/maximum-profit-sale-wines/ Knapsack A state can be defined as the set of parameters that can uniquely identify a certain position or standing in the given problem. This set of parameters should be as small as possible to reduce state space. For example: In our famous Knapsack problem, we define our state by two parameters index and weight i.e DP[index][weight]. Here DP[index][weight] tells us the maximum profit it can make by taking items from range 0 to index having the capacity of sack to be weight. Therefore, here the parameters index and weight together can uniquely identify a subproblem for the knapsack problem. https://atcoder.jp/contests/dp/tasks/dp_d There will be a nice twist in the next lecture/video, where weights can be huge but values are small. Why shortest path (in a graph with positive edges) works and the longest path doesn't. We would have to keep track of all visited vertices so far. Recovering the best solution for optimization problems like for min-path grid or wines. Store results only for two layers of DP state domain. Easy for Fibonacci, harder for path-grid and very hard for wines. DP 3.5 (Push vs Pull) \u00b6 push=forward, pull=backwards PUSH: There is a row of stones. For each stone, you know your range. Compute the number of ways to get from 1 to N. PUSH: probability problems DP 4 (problems) \u00b6 Hmm, maybe this should be split into separate videos? First six problems from atcoder dp contest. bonus problem: https://codeforces.com/problemset/problem/166/E DP 5 (single video for each problem) \u00b6 https://leetcode.com/problems/best-time-to-buy-and-sell-stock/ and continuations","title":"DP lecture"},{"location":"DP-lecture/#dynamic-programming-lecture-how-to-approach-a-problem","text":"","title":"Dynamic programming lecture - how to approach a problem?"},{"location":"DP-lecture/#dp-1","text":"Say that this lecture we'll solve Fibonacci, stairs and min-path in a grid. We'll think which method is better to learn: iterative or resursive. Then harder problems in next lectures. Each lecture is some theory and some problems. A DP is an algorithmic technique which is usually based on a recurrent formula and one (or some) starting states. A sub-solution of the problem is constructed from previously found ones. DP solutions have a polynomial complexity which assures a much faster running time than other techniques like backtracking, brute-force etc. (that was a quote by Dumitru from TC). Most DP problems are about optimizing (min or max) certain value/quantity or about counting something, e.g. the number of ways to get from one vertex to the other, or the number of ways to write N as a sum of smaller values. We can also use it to check if something is possible and report YES/NO. In case of optimization or YES/NO problems, you should often consider a greedy approach first. It might give you a much easier solution but it's viable only in some problems and the correctness is often hard to prove. Some problems are a mix of two. The example is max-subarray sum (Kadane\u2019s algorithm). Wikipedia says that one of the reasons the word \"dynamic\" was used is that \"it sounded impressive\". Why iterative (bottom-up) over recursion (top-down)? ( https://www.quora.com/Are-there-any-good-resources-or-tutorials-for-dynamic-programming-DP-besides-the-TopCoder-tutorial/answer/Michal-Danil%C3%A1k?share=1&srid=3OBi ) iteration is much faster than recursion one can easily see time and space complexity of the algorithm source code is short and clean It allows some more complicated techniques in harder problems, like prefix sums and segment trees. Sometimes recursion is better Visiting too many states. Given N, you can repeatedly divide it by 2 or 3. Count something? Recursion will get to some states only. When it's hard to figure out the order, e.g. in graphs. For DAG's, you can do topo-sort first. Fibonacci ( https://leetcode.com/problems/fibonacci-number/ ). This is similar to problems about \"counting ways\" but it's easier because we're just given the formula to use. Make a drawing (tree). Mention O(1) space solution. Mention factorial. Say something about overlapping subproblems and explain why DP isn't needed for factorial. Stairs: count ways to get from step 1 to N, if you can jump to one of next \u2154 steps ( https://leetcode.com/problems/climbing-stairs/ ). What if we can make at most K jumps? K is given, K <= N. Min path from top-left to bottom-right corner in a grid link: https://leetcode.com/problems/minimum-path-sum/ counting version: https://leetcode.com/problems/unique-paths/ What were base cases in those problems?","title":"DP 1"},{"location":"DP-lecture/#dp-2","text":"Given some numbers like {1, 3, 5} or {1, 2, 3}, we need to tell the total number of ways we can form a number 'N' using the sum of the given three numbers, allowing repetitions and different arrangements. https://leetcode.com/problems/combination-sum-iv/ Coin change the minimum number of coins used ( https://leetcode.com/problems/coin-change/ ) the number of ways ( https://leetcode.com/problems/coin-change-2/ ) Forward vs. pull-from-previous dp (TODO: what's the proper name?)","title":"DP 2"},{"location":"DP-lecture/#dp-3-wines","text":"A line of N wines, i-th with (the default/starting) price p[i]. You can sell leftmost or rightmost. The j-th sell gives j*p[i] money. Find the optimal order. solution I - dp[L][R] is the best score of remaining interval [L, R]. We know which year it is already. solution II - dp[L][R] is the best score so far, outside of interval [L, R]. solution III - dp[L][R] is the best score for interval [L, R] as if it was the whole sequence.","title":"Dp 3 - wines"},{"location":"DP-lecture/#dp-32","text":"A line of N wines, i-th with (the default/starting) price p[i]. You can sell leftmost or rightmost. The j-th sell gives j*p[i] money. Find the optimal order. We can either define dp[L][R] as the best score so far or the best score for the remaining interval [L, R]. Think what is important after making some decisions. https://www.quora.com/Are-there-any-good-resources-or-tutorials-for-dynamic-programming-DP-besides-the-TopCoder-tutorial/answer/Michal-Danil%C3%A1k?share=1&srid=3OBi https://www.geeksforgeeks.org/maximum-profit-sale-wines/ Knapsack A state can be defined as the set of parameters that can uniquely identify a certain position or standing in the given problem. This set of parameters should be as small as possible to reduce state space. For example: In our famous Knapsack problem, we define our state by two parameters index and weight i.e DP[index][weight]. Here DP[index][weight] tells us the maximum profit it can make by taking items from range 0 to index having the capacity of sack to be weight. Therefore, here the parameters index and weight together can uniquely identify a subproblem for the knapsack problem. https://atcoder.jp/contests/dp/tasks/dp_d There will be a nice twist in the next lecture/video, where weights can be huge but values are small. Why shortest path (in a graph with positive edges) works and the longest path doesn't. We would have to keep track of all visited vertices so far. Recovering the best solution for optimization problems like for min-path grid or wines. Store results only for two layers of DP state domain. Easy for Fibonacci, harder for path-grid and very hard for wines.","title":"DP 3.2"},{"location":"DP-lecture/#dp-35-push-vs-pull","text":"push=forward, pull=backwards PUSH: There is a row of stones. For each stone, you know your range. Compute the number of ways to get from 1 to N. PUSH: probability problems","title":"DP 3.5 (Push vs Pull)"},{"location":"DP-lecture/#dp-4-problems","text":"Hmm, maybe this should be split into separate videos? First six problems from atcoder dp contest. bonus problem: https://codeforces.com/problemset/problem/166/E","title":"DP 4 (problems)"},{"location":"DP-lecture/#dp-5-single-video-for-each-problem","text":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/ and continuations","title":"DP 5 (single video for each problem)"},{"location":"FAQ/","text":"Frequently Asked Questions \u00b6 1) Programming, YT channel \u00b6 What is competitive programming (CP)? Why two Youtube channels, Errichto and Errichto 2? Computer configuration (OS, IDE, keyboard, etc.) How to practice topic X? How to be good at competitive programming? How to train? What is your IDE setup / Geany setup? How can I support you / the channel / the stream? Do you accept donations? Social platforms? How can I contact you? What is your Git / Github repository? Can you record screencasts with commentary? How much time do you spend on programming? How much should I practice? What is Boring Programming Stream (BPS)? Can you help me with a problem? How to solve this? Do you participate in Project Euler? Will you write a book on algorithms or CP? Will you make a course on Udemy (free or paid)? What platforms do you recommend? What to do when my rating doesn't grow? How to measure my progress? What books do you recommend? Is Introduction to Algorithms good? How to practice math for CP? Is math important? How to handle sadness after failure in a contest? Hardware Software, OS, IDE Can you explain your templates (debug functions in C++)? 2) Personal \u00b6 Who are you? What language do you prefer? How old are you? What\u2019s your age? When did you start coding? Where do you live? Where are you from? What is your job? Why not Google, Facebook, etc.? Why don\u2019t you work for big companies? Have you ever thought of starting a business or a startup? Have you had some coding interviews? Did you apply for a job in a company? Are you still in the university? Do you have a degree? Have you participated in ICPC or IOI? How did you start with competitive programming? How old were you? What algorithms or topics do you like most? Do you personally know Radewoosh, mnbvmar, tourist, etc.? Why do you stream? Why did you decide to start streaming? Have you contributed to any open source projects? What languages do you speak? What are your hobbies? What's your WPM / typing speed? What is competitive programming (CP)? \u00b6 Competitive programming, also called sports programming, is a mind sport (just like chess) about quickly solving programming/algorithmic problems. You need to come up with an efficient enough algorithm and then implement it in your language of choice. Some examples are solving Sudoku grid or maybe finding the shortest way to get from one city to the other. There is some input specified (like an array of size at most 500000) and your function should return or print the answer. It\u2019s a sport that some people are very passionate about and devote a lot of time for. Best competitive programmers are often good in maths, chess and board games - just analytical thinking in general. Big competitions are organized or sponsored by companies that try to find and hire talented programmers. Since coding interviews are often about algorithms, a lot of people do some CP just to pass an interview. This creates demand and supply for CP but it will never be as popular as e-sports or standards sports like football because it isn't interesting to watch. Read more about CP here . Why two Youtube channels, Errichto and Errichto 2? \u00b6 The first channel has short well-prepared educational videos for casual programmers. The second one has streams, problem solving, and is mainly for the competitive programming community. Not everybody would enjoy a 5-hour boring stream where I write editorials. How to practice topic X? How to be good at competitive programming? How to train? \u00b6 See \"How to practice?\" page, link . What is your IDE setup / Geany setup? \u00b6 See \"Linux setup\" page, link . How can I support you / the channel / the stream? Do you accept donations? \u00b6 Help me grow by telling your programmer friends about the channel. And you can give me suggestions for videos, streams or general ways to improve. I don't need donations. Feel free to support a charity of your choice instead. Social platforms? How can I contact you? \u00b6 Youtube: https://www.youtube.com/errichto Youtube 2: https://www.youtube.com/errichto2 Twitch: https://www.twitch.tv/errichto Discord: https://discordapp.com/invite/UzaURu7 Facebook: https://www.facebook.com/errichto Twitter: https://twitter.com/errichto (I don't reply to messages on Twitter, sorry about that) What is your Git / Github repository? \u00b6 https://github.com/Errichto/youtube Can you record screencasts with commentary? \u00b6 I can't talk and focus at the same time. I sometimes add commentary afterward. I think that screencasts without sound are quite boring but I sometimes do them and upload on https://youtube.com/errichto2 . Generally, I will keep making some problem-solving streams where I don't have time pressure, and let's leave screencasts to the very top competitors like Petr and Um_nik. How much time do you spend on programming? How much should I practice? \u00b6 If you are in school or university, it shouldn't be hard to find at least 10 hours per week to practice competitive programming. Perfectly, you should do 20 hours per week IMO. It's much harder when you have a job and/or a family. Then you are simply limited by your free time and that's fine - you don't have to hit some numbers. I currently spend a lot of time on competitive programming because it's my job, so maybe 30 hours a week, but I don't solve problems that much anymore. It used to be maybe 10 hours a week when I started. What is Boring Programming Stream (BPS)? \u00b6 My not-well-organized streams where I do random things, including reading articles on algorithms and also maintaining my Youtube channel, e.g. answering comments. Basically, boring stuff. In particular, BPS is not meant to be a lecture. If I read or talk about some topic, it's because I'm doing some research or I'm curious how it's explained by others on the Internet. Maybe I'm preparing a Youtube lecture myself. Anyway, I won't necessarily explain everything. Can you help me with a problem? How to solve this? \u00b6 Read Asking for help FAQ . Do you participate in Project Euler? \u00b6 No, I don't. They have hard math problems and I'm not that good in them. I enjoy standard algorithms more. I also don't recommend it that much unless you are experienced in math and want to improve even more. Will you write a book on algorithms or CP? \u00b6 Not likely. I'm not a good writer. I enjoy thinking about the best way to explain something though, so maybe I will coauthor something eventually. And it's a huge time commitment while I have a lot of things to do currently. Will you make a course on Udemy (free or paid)? \u00b6 I don't think that it's better than what I'm currently doing on Youtube. I could make a paid course to make some money but I can reach more people on Youtube instead and I would feel that I need to spend a loooot of time to make the best possible product if somebody pays for it. I would basically need to stop doing other things now. And Udemy takes a big cut of the money. What platforms do you recommend? \u00b6 Atcoder and Codeforces. For more info, refer to How to practice? . What to do when my rating doesn't grow? How to measure my progress? \u00b6 If you learn new things and you would solve a problem that you couldn't a month ago, you're fine. Rating is a bit random and it's ok to focus on solving problems. Make your goal to be some number of not-easy problems solved in a month, and focus on achieving that. What books do you recommend? Is Introduction to Algorithms good? \u00b6 Competitive Programmer's Handbook is great for beginners and it's a free PDF online, https://cses.fi/book/book.pdf . Generally, books aren't important and nowadays it's ok to just solve problems online, as long as they have editorials. When you can't solve a problem, read the editorial and you've just learned something new. How to practice math for CP? Is math important? \u00b6 Benq (IOI winner) answered this in detail: https://github.com/bqi343/USACO/blob/master/Resources/Competition%20Math.md My answer would be this: I have a strong math background from school, and it helps a lot in CP. I don't know which books or other resources are best if you want to catch up. Well, you can always get a book on combinatorics and go through it. Or check out this recent video series https://codeforces.com/blog/entry/77137 . How to handle sadness after failure in a contest? \u00b6 Feeling sad after a failure is natural and it gets better with time. If you care so much about contests and your performance, use that to motivate you to practice more. And remember that losing CF rating makes it only easier to gain rating in the next contest. Hardware \u00b6 My setup is Blue Yeti microphone, Logitech StreamCam, Wacom Intuos drawing tablet, Logitech UltraX Premium (old but amazing keyboard), a random wireless mouse (M330 Silent Plus), and two iiyama ProLite XUB2492HSU-B1 monitors on a combined movable stand. I use a small lamp YN600 Air for better video quality. I also own Playstation 4 and Oculus Rift S. PC's specs: i9-9900K, RTX 2070, 4TB HDD, 1TB SSD, 32GB RAM in detail: Asus Rog Strix GeForce RTX 2070 Super A8G Gaming 8GB, SSD Samsung 970 EVO Plus 1TB, mobo Gigabyte Z390 AORUS MASTER, be quiet Pure Base 600, RAM Corsair Vengeance LPX, DDR4, 32 GB,3000MHz, CL15 Software, OS, IDE \u00b6 I mainly use Linux (Ubuntu) and sometimes Windows because it has better software for streaming. Geany is a good editor for simple things like Competitive Programming (why not Vim? I don\u2019t know how to use it), VS Code is fine too. On Windows, I use OBS Studio for streaming and recording, OneNote for drawing (but it has flaws and I don't recommend it), Adobe Premiere Elements and Photoshop Elements for editing. Can you explain your templates (debug functions in C++)? \u00b6 Maybe I will make such a video one day. They are very hacky and ugly though, don't use them. Who are you? \u00b6 My name is Kamil D\u0119bowski (or Errichto) and I'm quite good at competitive programming. I'm a finalist of multiple big programming competitions like ICPC, Facebook Hacker Cup and Google Code Jam (even got 2 nd place in 2018). I also organize competitions, which means inventing and preparing problems. What language do you prefer? \u00b6 C++. It is very efficient and thus most popular in competitive programming. I also know some Java and Python. How old are you? What\u2019s your age? When did you start coding? \u00b6 I was born 1995. I was 13 when I wrote my first code, and 15 when I started doing competitive programming. Where do you live? Where are you from? \u00b6 I live in Warsaw, Poland. What is your job? \u00b6 I teach programming. I organize competitions and workshops and I'm interested in algo/programming education in general. I give private coaching but I'm not accepting new students (so don't ask me about it). I make videos and streams for Youtube and Twitch. Maybe it will be a source of income for me one day. Why not Google, Facebook, etc.? Why don\u2019t you work for big companies? \u00b6 Why should I? I do something I like and I\u2019m happy with that. Working for Google is a dream for some people but not for everybody. The bigger the company, smaller is the impact you have yourself (you are a tiny cog in a huge machine). You are partially limited in what you can do - especially if you are not willing to relocate to another country. I have friends and family in Poland, so at least for now I want to stay here. There aren't a lot of possibilities in Warsaw office of Google. Have you ever thought of starting a business or a startup? \u00b6 Yes, it's something very exciting to me. My strength is algorithms knowledge so it will likely be something related to programming camps or online courses. Have you had some coding interviews? Did you apply for a job in a company? \u00b6 Yes, I did and I actually have 100% acceptance so far (5 out of 5, I think), which surprises me because I didn't know some basic stuff a few years ago like unit testing or language-specific details. I did some short part-time working or an internship, and also rejected some offers. I was also offered normal full-time jobs. I didn't try any big company so far though. Are you still in the university? Do you have a degree? \u00b6 No, but I tried a few fields: maths, CS and economics. Each time I hated some subjects. I eventually decided to just pursue a career without graduating. I still visit maths&informatics faculty of the University of Warsaw to attend some extra lectures or ICPC trainings/contests. I still hang out most with people from maths&informatics faculty of the University of Warsaw. Have you participated in ICPC or IOI? \u00b6 I started doing CP quite late, so in high school I wasn't good enough to get to IOI. I did participate in ICPC though. I got a bronze medal (12 th place) in 2015 and didn\u2019t get a medal in 2018 (14 th place), which was a disaster for me because we were one of the best teams and we fought for the win. How did you start with competitive programming? How old were you? \u00b6 I was good in maths and a friend told about POI (Polish olympiad) so I checked the problems out and was able to solve some in a few days (the first stage lasts for a month). I was 15. I learnt from Polish websites because I didn\u2019t know English well. My skills greatly improved by reading Cormen\u2019s Introduction to Algo but I don\u2019t recommend it. It\u2019s outdated and there are better resources. If you want a book, read Competitive Programmer\u2019s Handbook . What algorithms or topics do you like most? \u00b6 Ad-hoc, dp, geometry, combinatorics and probability. I don't like graphs, strings and number theory. Do you personally know Radewoosh, mnbvmar, tourist, etc.? \u00b6 Yes. I know all competitive programmers from Poland and many from abroad. Why do you stream? Why did you decide to start streaming? \u00b6 I like teaching and I think I'm quite good at explaining stuff. There isn't a lot of video content on algorithms and competitive programming, so I can fill the niche. I don't earn money from Youtube and Twitch currently, but maybe eventually it will be my source of income. Have you contributed to any open source projects? \u00b6 No, I haven't. I'm not really that good software engineer. My coding skills (like style of code and knowledge of libraries) are not better than an average programmer. Instead, I contribute by making educational content and teaching for free. What languages do you speak? \u00b6 Only Polish and English. I know the Russian alphabet (Cyrillic) and some words - mainly those that are the same in Polish. These two languages are quite similar. What are your hobbies? \u00b6 Other than programming, I'm a quite casual person. I watch movies and tv series. I used to play chess, poker and volleyball. I like board games, e.g. Splendor and 7 Wonders. I have a PS4 for its amazing exclusives like Uncharted and The Last of Us. I read a book from time to time. The Witcher saga rules, and so does the Witcher 3 game. The last game I played (as of February 2020) is Frostpunk. What's your WPM / typing speed? \u00b6 Around 80 WPM on average, and up to 110 WPM for very simple English words. There are free tools online if you want to practice fast typing. What's the black background with formulas? \u00b6 I didn't want to bother with a green screen and instead a bought a so called wind screen with science formulas (physics, maths, biology, chemistry, etc.).","title":"FAQ"},{"location":"FAQ/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"FAQ/#1-programming-yt-channel","text":"What is competitive programming (CP)? Why two Youtube channels, Errichto and Errichto 2? Computer configuration (OS, IDE, keyboard, etc.) How to practice topic X? How to be good at competitive programming? How to train? What is your IDE setup / Geany setup? How can I support you / the channel / the stream? Do you accept donations? Social platforms? How can I contact you? What is your Git / Github repository? Can you record screencasts with commentary? How much time do you spend on programming? How much should I practice? What is Boring Programming Stream (BPS)? Can you help me with a problem? How to solve this? Do you participate in Project Euler? Will you write a book on algorithms or CP? Will you make a course on Udemy (free or paid)? What platforms do you recommend? What to do when my rating doesn't grow? How to measure my progress? What books do you recommend? Is Introduction to Algorithms good? How to practice math for CP? Is math important? How to handle sadness after failure in a contest? Hardware Software, OS, IDE Can you explain your templates (debug functions in C++)?","title":"1) Programming, YT channel"},{"location":"FAQ/#2-personal","text":"Who are you? What language do you prefer? How old are you? What\u2019s your age? When did you start coding? Where do you live? Where are you from? What is your job? Why not Google, Facebook, etc.? Why don\u2019t you work for big companies? Have you ever thought of starting a business or a startup? Have you had some coding interviews? Did you apply for a job in a company? Are you still in the university? Do you have a degree? Have you participated in ICPC or IOI? How did you start with competitive programming? How old were you? What algorithms or topics do you like most? Do you personally know Radewoosh, mnbvmar, tourist, etc.? Why do you stream? Why did you decide to start streaming? Have you contributed to any open source projects? What languages do you speak? What are your hobbies? What's your WPM / typing speed?","title":"2) Personal"},{"location":"FAQ/#what-is-competitive-programming-cp","text":"Competitive programming, also called sports programming, is a mind sport (just like chess) about quickly solving programming/algorithmic problems. You need to come up with an efficient enough algorithm and then implement it in your language of choice. Some examples are solving Sudoku grid or maybe finding the shortest way to get from one city to the other. There is some input specified (like an array of size at most 500000) and your function should return or print the answer. It\u2019s a sport that some people are very passionate about and devote a lot of time for. Best competitive programmers are often good in maths, chess and board games - just analytical thinking in general. Big competitions are organized or sponsored by companies that try to find and hire talented programmers. Since coding interviews are often about algorithms, a lot of people do some CP just to pass an interview. This creates demand and supply for CP but it will never be as popular as e-sports or standards sports like football because it isn't interesting to watch. Read more about CP here .","title":"What is competitive programming (CP)?"},{"location":"FAQ/#why-two-youtube-channels-errichto-and-errichto-2","text":"The first channel has short well-prepared educational videos for casual programmers. The second one has streams, problem solving, and is mainly for the competitive programming community. Not everybody would enjoy a 5-hour boring stream where I write editorials.","title":"Why two Youtube channels, Errichto and Errichto 2?"},{"location":"FAQ/#how-to-practice-topic-x-how-to-be-good-at-competitive-programming-how-to-train","text":"See \"How to practice?\" page, link .","title":"How to practice topic X? How to be good at competitive programming? How to train?"},{"location":"FAQ/#what-is-your-ide-setup-geany-setup","text":"See \"Linux setup\" page, link .","title":"What is your IDE setup / Geany setup?"},{"location":"FAQ/#how-can-i-support-you-the-channel-the-stream-do-you-accept-donations","text":"Help me grow by telling your programmer friends about the channel. And you can give me suggestions for videos, streams or general ways to improve. I don't need donations. Feel free to support a charity of your choice instead.","title":"How can I support you / the channel / the stream? Do you accept donations?"},{"location":"FAQ/#social-platforms-how-can-i-contact-you","text":"Youtube: https://www.youtube.com/errichto Youtube 2: https://www.youtube.com/errichto2 Twitch: https://www.twitch.tv/errichto Discord: https://discordapp.com/invite/UzaURu7 Facebook: https://www.facebook.com/errichto Twitter: https://twitter.com/errichto (I don't reply to messages on Twitter, sorry about that)","title":"Social platforms? How can I contact you?"},{"location":"FAQ/#what-is-your-git-github-repository","text":"https://github.com/Errichto/youtube","title":"What is your Git / Github repository?"},{"location":"FAQ/#can-you-record-screencasts-with-commentary","text":"I can't talk and focus at the same time. I sometimes add commentary afterward. I think that screencasts without sound are quite boring but I sometimes do them and upload on https://youtube.com/errichto2 . Generally, I will keep making some problem-solving streams where I don't have time pressure, and let's leave screencasts to the very top competitors like Petr and Um_nik.","title":"Can you record screencasts with commentary?"},{"location":"FAQ/#how-much-time-do-you-spend-on-programming-how-much-should-i-practice","text":"If you are in school or university, it shouldn't be hard to find at least 10 hours per week to practice competitive programming. Perfectly, you should do 20 hours per week IMO. It's much harder when you have a job and/or a family. Then you are simply limited by your free time and that's fine - you don't have to hit some numbers. I currently spend a lot of time on competitive programming because it's my job, so maybe 30 hours a week, but I don't solve problems that much anymore. It used to be maybe 10 hours a week when I started.","title":"How much time do you spend on programming? How much should I practice?"},{"location":"FAQ/#what-is-boring-programming-stream-bps","text":"My not-well-organized streams where I do random things, including reading articles on algorithms and also maintaining my Youtube channel, e.g. answering comments. Basically, boring stuff. In particular, BPS is not meant to be a lecture. If I read or talk about some topic, it's because I'm doing some research or I'm curious how it's explained by others on the Internet. Maybe I'm preparing a Youtube lecture myself. Anyway, I won't necessarily explain everything.","title":"What is Boring Programming Stream (BPS)?"},{"location":"FAQ/#can-you-help-me-with-a-problem-how-to-solve-this","text":"Read Asking for help FAQ .","title":"Can you help me with a problem? How to solve this?"},{"location":"FAQ/#do-you-participate-in-project-euler","text":"No, I don't. They have hard math problems and I'm not that good in them. I enjoy standard algorithms more. I also don't recommend it that much unless you are experienced in math and want to improve even more.","title":"Do you participate in Project Euler?"},{"location":"FAQ/#will-you-write-a-book-on-algorithms-or-cp","text":"Not likely. I'm not a good writer. I enjoy thinking about the best way to explain something though, so maybe I will coauthor something eventually. And it's a huge time commitment while I have a lot of things to do currently.","title":"Will you write a book on algorithms or CP?"},{"location":"FAQ/#will-you-make-a-course-on-udemy-free-or-paid","text":"I don't think that it's better than what I'm currently doing on Youtube. I could make a paid course to make some money but I can reach more people on Youtube instead and I would feel that I need to spend a loooot of time to make the best possible product if somebody pays for it. I would basically need to stop doing other things now. And Udemy takes a big cut of the money.","title":"Will you make a course on Udemy (free or paid)?"},{"location":"FAQ/#what-platforms-do-you-recommend","text":"Atcoder and Codeforces. For more info, refer to How to practice? .","title":"What platforms do you recommend?"},{"location":"FAQ/#what-to-do-when-my-rating-doesnt-grow-how-to-measure-my-progress","text":"If you learn new things and you would solve a problem that you couldn't a month ago, you're fine. Rating is a bit random and it's ok to focus on solving problems. Make your goal to be some number of not-easy problems solved in a month, and focus on achieving that.","title":"What to do when my rating doesn't grow? How to measure my progress?"},{"location":"FAQ/#what-books-do-you-recommend-is-introduction-to-algorithms-good","text":"Competitive Programmer's Handbook is great for beginners and it's a free PDF online, https://cses.fi/book/book.pdf . Generally, books aren't important and nowadays it's ok to just solve problems online, as long as they have editorials. When you can't solve a problem, read the editorial and you've just learned something new.","title":"What books do you recommend? Is Introduction to Algorithms good?"},{"location":"FAQ/#how-to-practice-math-for-cp-is-math-important","text":"Benq (IOI winner) answered this in detail: https://github.com/bqi343/USACO/blob/master/Resources/Competition%20Math.md My answer would be this: I have a strong math background from school, and it helps a lot in CP. I don't know which books or other resources are best if you want to catch up. Well, you can always get a book on combinatorics and go through it. Or check out this recent video series https://codeforces.com/blog/entry/77137 .","title":"How to practice math for CP? Is math important?"},{"location":"FAQ/#how-to-handle-sadness-after-failure-in-a-contest","text":"Feeling sad after a failure is natural and it gets better with time. If you care so much about contests and your performance, use that to motivate you to practice more. And remember that losing CF rating makes it only easier to gain rating in the next contest.","title":"How to handle sadness after failure in a contest?"},{"location":"FAQ/#hardware","text":"My setup is Blue Yeti microphone, Logitech StreamCam, Wacom Intuos drawing tablet, Logitech UltraX Premium (old but amazing keyboard), a random wireless mouse (M330 Silent Plus), and two iiyama ProLite XUB2492HSU-B1 monitors on a combined movable stand. I use a small lamp YN600 Air for better video quality. I also own Playstation 4 and Oculus Rift S. PC's specs: i9-9900K, RTX 2070, 4TB HDD, 1TB SSD, 32GB RAM in detail: Asus Rog Strix GeForce RTX 2070 Super A8G Gaming 8GB, SSD Samsung 970 EVO Plus 1TB, mobo Gigabyte Z390 AORUS MASTER, be quiet Pure Base 600, RAM Corsair Vengeance LPX, DDR4, 32 GB,3000MHz, CL15","title":"Hardware"},{"location":"FAQ/#software-os-ide","text":"I mainly use Linux (Ubuntu) and sometimes Windows because it has better software for streaming. Geany is a good editor for simple things like Competitive Programming (why not Vim? I don\u2019t know how to use it), VS Code is fine too. On Windows, I use OBS Studio for streaming and recording, OneNote for drawing (but it has flaws and I don't recommend it), Adobe Premiere Elements and Photoshop Elements for editing.","title":"Software, OS, IDE"},{"location":"FAQ/#can-you-explain-your-templates-debug-functions-in-c","text":"Maybe I will make such a video one day. They are very hacky and ugly though, don't use them.","title":"Can you explain your templates (debug functions in C++)?"},{"location":"FAQ/#who-are-you","text":"My name is Kamil D\u0119bowski (or Errichto) and I'm quite good at competitive programming. I'm a finalist of multiple big programming competitions like ICPC, Facebook Hacker Cup and Google Code Jam (even got 2 nd place in 2018). I also organize competitions, which means inventing and preparing problems.","title":"Who are you?"},{"location":"FAQ/#what-language-do-you-prefer","text":"C++. It is very efficient and thus most popular in competitive programming. I also know some Java and Python.","title":"What language do you prefer?"},{"location":"FAQ/#how-old-are-you-whats-your-age-when-did-you-start-coding","text":"I was born 1995. I was 13 when I wrote my first code, and 15 when I started doing competitive programming.","title":"How old are you? What\u2019s your age? When did you start coding?"},{"location":"FAQ/#where-do-you-live-where-are-you-from","text":"I live in Warsaw, Poland.","title":"Where do you live? Where are you from?"},{"location":"FAQ/#what-is-your-job","text":"I teach programming. I organize competitions and workshops and I'm interested in algo/programming education in general. I give private coaching but I'm not accepting new students (so don't ask me about it). I make videos and streams for Youtube and Twitch. Maybe it will be a source of income for me one day.","title":"What is your job?"},{"location":"FAQ/#why-not-google-facebook-etc-why-dont-you-work-for-big-companies","text":"Why should I? I do something I like and I\u2019m happy with that. Working for Google is a dream for some people but not for everybody. The bigger the company, smaller is the impact you have yourself (you are a tiny cog in a huge machine). You are partially limited in what you can do - especially if you are not willing to relocate to another country. I have friends and family in Poland, so at least for now I want to stay here. There aren't a lot of possibilities in Warsaw office of Google.","title":"Why not Google, Facebook, etc.? Why don\u2019t you work for big companies?"},{"location":"FAQ/#have-you-ever-thought-of-starting-a-business-or-a-startup","text":"Yes, it's something very exciting to me. My strength is algorithms knowledge so it will likely be something related to programming camps or online courses.","title":"Have you ever thought of starting a business or a startup?"},{"location":"FAQ/#have-you-had-some-coding-interviews-did-you-apply-for-a-job-in-a-company","text":"Yes, I did and I actually have 100% acceptance so far (5 out of 5, I think), which surprises me because I didn't know some basic stuff a few years ago like unit testing or language-specific details. I did some short part-time working or an internship, and also rejected some offers. I was also offered normal full-time jobs. I didn't try any big company so far though.","title":"Have you had some coding interviews? Did you apply for a job in a company?"},{"location":"FAQ/#are-you-still-in-the-university-do-you-have-a-degree","text":"No, but I tried a few fields: maths, CS and economics. Each time I hated some subjects. I eventually decided to just pursue a career without graduating. I still visit maths&informatics faculty of the University of Warsaw to attend some extra lectures or ICPC trainings/contests. I still hang out most with people from maths&informatics faculty of the University of Warsaw.","title":"Are you still in the university? Do you have a degree?"},{"location":"FAQ/#have-you-participated-in-icpc-or-ioi","text":"I started doing CP quite late, so in high school I wasn't good enough to get to IOI. I did participate in ICPC though. I got a bronze medal (12 th place) in 2015 and didn\u2019t get a medal in 2018 (14 th place), which was a disaster for me because we were one of the best teams and we fought for the win.","title":"Have you participated in ICPC or IOI?"},{"location":"FAQ/#how-did-you-start-with-competitive-programming-how-old-were-you","text":"I was good in maths and a friend told about POI (Polish olympiad) so I checked the problems out and was able to solve some in a few days (the first stage lasts for a month). I was 15. I learnt from Polish websites because I didn\u2019t know English well. My skills greatly improved by reading Cormen\u2019s Introduction to Algo but I don\u2019t recommend it. It\u2019s outdated and there are better resources. If you want a book, read Competitive Programmer\u2019s Handbook .","title":"How did you start with competitive programming? How old were you?"},{"location":"FAQ/#what-algorithms-or-topics-do-you-like-most","text":"Ad-hoc, dp, geometry, combinatorics and probability. I don't like graphs, strings and number theory.","title":"What algorithms or topics do you like most?"},{"location":"FAQ/#do-you-personally-know-radewoosh-mnbvmar-tourist-etc","text":"Yes. I know all competitive programmers from Poland and many from abroad.","title":"Do you personally know Radewoosh, mnbvmar, tourist, etc.?"},{"location":"FAQ/#why-do-you-stream-why-did-you-decide-to-start-streaming","text":"I like teaching and I think I'm quite good at explaining stuff. There isn't a lot of video content on algorithms and competitive programming, so I can fill the niche. I don't earn money from Youtube and Twitch currently, but maybe eventually it will be my source of income.","title":"Why do you stream? Why did you decide to start streaming?"},{"location":"FAQ/#have-you-contributed-to-any-open-source-projects","text":"No, I haven't. I'm not really that good software engineer. My coding skills (like style of code and knowledge of libraries) are not better than an average programmer. Instead, I contribute by making educational content and teaching for free.","title":"Have you contributed to any open source projects?"},{"location":"FAQ/#what-languages-do-you-speak","text":"Only Polish and English. I know the Russian alphabet (Cyrillic) and some words - mainly those that are the same in Polish. These two languages are quite similar.","title":"What languages do you speak?"},{"location":"FAQ/#what-are-your-hobbies","text":"Other than programming, I'm a quite casual person. I watch movies and tv series. I used to play chess, poker and volleyball. I like board games, e.g. Splendor and 7 Wonders. I have a PS4 for its amazing exclusives like Uncharted and The Last of Us. I read a book from time to time. The Witcher saga rules, and so does the Witcher 3 game. The last game I played (as of February 2020) is Frostpunk.","title":"What are your hobbies?"},{"location":"FAQ/#whats-your-wpm-typing-speed","text":"Around 80 WPM on average, and up to 110 WPM for very simple English words. There are free tools online if you want to practice fast typing.","title":"What's your WPM / typing speed?"},{"location":"FAQ/#whats-the-black-background-with-formulas","text":"I didn't want to bother with a green screen and instead a bought a so called wind screen with science formulas (physics, maths, biology, chemistry, etc.).","title":"What's the black background with formulas?"},{"location":"How-to-practice%3F/","text":"tl;dr \u00b6 Just practice. Solve problems, solve problems and solve some more problems. By doing it, you will also learn new algorithms and techniques. How to practice? \u00b6 Everything below is written with competitive programming in mind, but practicing for coding interviews is similar. Your goal should be to get better at algorithms and data structures. Solve problems slightly above your level - those that aren't easy for you but you can usually solve them. If you are stuck for 20-30 minutes (an hour in case of harder problems), read an editorial and make sure you understand it. Implement a solution and if you struggled then go read other people's codes - see how they did it easier. Note the word \"stuck\" in bold. If you aren't out of ideas then you aren't stuck. You can give up only if you didn't do any progress for some time. Upsolve problems you didn't solve during a contest. Not all of them, just one-two more. Don't try something very hard because you likely won't solve it. You will eventually learn enough to tackle those hard problems. How to practice a particular topic? \u00b6 Use Google to find some tutorials and read them. Solve problems on that topic. After a while, go back to solving random problems. You should now be able to recognize similar problems and apply the new algorithm/technique you learned. For smaller algorithms/techniques, it's enough to solve a few problems to understand it well enough. In case of big topics (categories) like dynamic programming, you should solve tens of problems. But don't spend months on that because you cheat a little bit by knowing what you should use in a problem. When you read a problem during a contest, you don't know its tags/topics. Sometimes the hard part is to come up with what you should use. Recognizing patterns is a valuable skill and that's why you need to mainly solve random problems. What should I learn next? \u00b6 Just solve problems. If there is some algorithm you should know, you will eventually encounter it. Then search for some tutorials and similar problems. What platform should I use? \u00b6 The platform doesn't matter much but it's good to solve problems with editorials (and public codes of other people). That will make you learn faster. For beginners, I recommend Codeforces educational rounds and Atcoder Beginner Contests (ABC). You will encounter a lot of standard problems and thus you will learn important techniques. The statements are not convoluted and that's another plus. There are no English editorials for ABC but you can use google translate from Japanese, or you can read submissions by people from the top. Nowadays, ABC has English editorials after a few days, sometimes posted by Geothermal on CF, https://codeforces.com/blog/Geothermal . How to train for a particular competition (IOI, ICPC, GCJ, etc.)? \u00b6 Focus on solving old problems from this competition. Don't worry too much about it though. It's still just about being good at algorithms. Solving problems from other contests isn't a waste of time. For excelling in IOI, make sure you know everything from the syllabus. To get better in ICPC, you should obviously solve some old team contests with a team. Read more here . Read more \u00b6 Whole directory with detailed instructions from two-times IOI winner, Benq A way to Practice Competitive Programming: From Rating 1000 to 2400+ The 'science' of training in competitive programming Yet another similar blog Topcoder tutorials - a few first articles are about approaching a problem, like \"How To Dissect a Topcoder Problem Statement\".","title":"How to practice?"},{"location":"How-to-practice%3F/#tldr","text":"Just practice. Solve problems, solve problems and solve some more problems. By doing it, you will also learn new algorithms and techniques.","title":"tl;dr"},{"location":"How-to-practice%3F/#how-to-practice","text":"Everything below is written with competitive programming in mind, but practicing for coding interviews is similar. Your goal should be to get better at algorithms and data structures. Solve problems slightly above your level - those that aren't easy for you but you can usually solve them. If you are stuck for 20-30 minutes (an hour in case of harder problems), read an editorial and make sure you understand it. Implement a solution and if you struggled then go read other people's codes - see how they did it easier. Note the word \"stuck\" in bold. If you aren't out of ideas then you aren't stuck. You can give up only if you didn't do any progress for some time. Upsolve problems you didn't solve during a contest. Not all of them, just one-two more. Don't try something very hard because you likely won't solve it. You will eventually learn enough to tackle those hard problems.","title":"How to practice?"},{"location":"How-to-practice%3F/#how-to-practice-a-particular-topic","text":"Use Google to find some tutorials and read them. Solve problems on that topic. After a while, go back to solving random problems. You should now be able to recognize similar problems and apply the new algorithm/technique you learned. For smaller algorithms/techniques, it's enough to solve a few problems to understand it well enough. In case of big topics (categories) like dynamic programming, you should solve tens of problems. But don't spend months on that because you cheat a little bit by knowing what you should use in a problem. When you read a problem during a contest, you don't know its tags/topics. Sometimes the hard part is to come up with what you should use. Recognizing patterns is a valuable skill and that's why you need to mainly solve random problems.","title":"How to practice a particular topic?"},{"location":"How-to-practice%3F/#what-should-i-learn-next","text":"Just solve problems. If there is some algorithm you should know, you will eventually encounter it. Then search for some tutorials and similar problems.","title":"What should I learn next?"},{"location":"How-to-practice%3F/#what-platform-should-i-use","text":"The platform doesn't matter much but it's good to solve problems with editorials (and public codes of other people). That will make you learn faster. For beginners, I recommend Codeforces educational rounds and Atcoder Beginner Contests (ABC). You will encounter a lot of standard problems and thus you will learn important techniques. The statements are not convoluted and that's another plus. There are no English editorials for ABC but you can use google translate from Japanese, or you can read submissions by people from the top. Nowadays, ABC has English editorials after a few days, sometimes posted by Geothermal on CF, https://codeforces.com/blog/Geothermal .","title":"What platform should I use?"},{"location":"How-to-practice%3F/#how-to-train-for-a-particular-competition-ioi-icpc-gcj-etc","text":"Focus on solving old problems from this competition. Don't worry too much about it though. It's still just about being good at algorithms. Solving problems from other contests isn't a waste of time. For excelling in IOI, make sure you know everything from the syllabus. To get better in ICPC, you should obviously solve some old team contests with a team. Read more here .","title":"How to train for a particular competition (IOI, ICPC, GCJ, etc.)?"},{"location":"How-to-practice%3F/#read-more","text":"Whole directory with detailed instructions from two-times IOI winner, Benq A way to Practice Competitive Programming: From Rating 1000 to 2400+ The 'science' of training in competitive programming Yet another similar blog Topcoder tutorials - a few first articles are about approaching a problem, like \"How To Dissect a Topcoder Problem Statement\".","title":"Read more"},{"location":"IOI-Syllabus/","text":"I wrote down what surprised me or at least wasn't obvious to me. Included \u00b6 Inclusion-exclusion Combinatorics Euler\u2019s tour on a tree Bipartite matching in O(V*E) Basics of combinatorial game theory, winning and losing positions, minimax BST, BIT/Fenwick Creating persistent data structures by path copying Outside of focus \u00b6 Discrete probability Using fractions to perform exact calculations Randomized algorithms Online algorithms Excluded \u00b6 Gcd Chinese remainder theorem Modular division/inversion 3d geometry Precision issues Trigonometry Burnside Linear algebra, matrices, Gaussian elimination Calculus NIM Max flow KMP Heavy-light decomposition \u201cSeparator structures for static trees\u201d - centroids? Understanding hash tables 2D trees Center of the mass of a 2D object","title":"IOI Syllabus"},{"location":"IOI-Syllabus/#included","text":"Inclusion-exclusion Combinatorics Euler\u2019s tour on a tree Bipartite matching in O(V*E) Basics of combinatorial game theory, winning and losing positions, minimax BST, BIT/Fenwick Creating persistent data structures by path copying","title":"Included"},{"location":"IOI-Syllabus/#outside-of-focus","text":"Discrete probability Using fractions to perform exact calculations Randomized algorithms Online algorithms","title":"Outside of focus"},{"location":"IOI-Syllabus/#excluded","text":"Gcd Chinese remainder theorem Modular division/inversion 3d geometry Precision issues Trigonometry Burnside Linear algebra, matrices, Gaussian elimination Calculus NIM Max flow KMP Heavy-light decomposition \u201cSeparator structures for static trees\u201d - centroids? Understanding hash tables 2D trees Center of the mass of a 2D object","title":"Excluded"},{"location":"Learning-resources/","text":"I want to read various resources on the Internet and compare them. The goal is to know what to recommend to people, e.g. what is the best blog about segment trees. Binary search \u00b6 https://leetcode.com/explore/learn/card/binary-search/ (this is not perfect, TODO: finding something better) Segment trees \u00b6 https://codeforces.com/blog/entry/18051 (but no drawings and code hard to read) Gaussian elimination \u00b6 https://en.wikipedia.org/wiki/Gaussian_elimination (example explained) https://cp-algorithms.com/linear_algebra/linear-system-gauss.html (programming, precision, modulo 2 version) Math for CP \u00b6 https://codeforces.com/blog/entry/77137 (youtube tutorial series) General advice for authors \u00b6 Drawings Starting from the most basic examples and versions Don\u2019t start with \u201cthis topic is easy\u201d Try to make code easy to understand instead of one-liners Upload images to the website (e.g. to CF) instead of other hosts Things I want to check out \u00b6 https://comscigate.com/Books/contests/icpc.pdf , The Hitchhiker\u2019s Guide Competitive Programming 3, not free! Categories \u00b6 Implementation; vectors and sets Binary search Prime sieve; prime check in O(sqrt(N)) Dynamic Programming - Fibonacci numbers, prefix sums Sorting Greedy Ad-hoc Graphs - graph representation, BFS, DFS, trees Geometry - distance between two points Bitmasks Two pointers, sliding window Data structures - sqrt decomposition, segment trees, Fenwick/BIT, persistent structures, Policy-Based-DS, treaps, BST Ternary search Interactive problems LIS LCS Maths Number theory Combinatorics, probability, EV Find & Union Game theory - NIM, Grundy Hashing Strings - KMP, Z Geometry - cross product, convex hull Matrix exponentiation Divide & Conquer DP optimizations Graphs - Dijkstra, FW, SCC, bridges, matching, flows Randomized algorithms TRIE Trees - bottom-up dp, LCA, Centroid decomposition, HLD, DSU 2-SAT Strings - suffix arrays Constructive algorithms Expression parsing Meet in the middle FFT Chinese remainder theorem Gaussian elimination Difference array, binary lifting Solutions for CSES DP problems: https://codeforces.com/blog/entry/70018#comment-545687","title":"Learning resources"},{"location":"Learning-resources/#binary-search","text":"https://leetcode.com/explore/learn/card/binary-search/ (this is not perfect, TODO: finding something better)","title":"Binary search"},{"location":"Learning-resources/#segment-trees","text":"https://codeforces.com/blog/entry/18051 (but no drawings and code hard to read)","title":"Segment trees"},{"location":"Learning-resources/#gaussian-elimination","text":"https://en.wikipedia.org/wiki/Gaussian_elimination (example explained) https://cp-algorithms.com/linear_algebra/linear-system-gauss.html (programming, precision, modulo 2 version)","title":"Gaussian elimination"},{"location":"Learning-resources/#math-for-cp","text":"https://codeforces.com/blog/entry/77137 (youtube tutorial series)","title":"Math for CP"},{"location":"Learning-resources/#general-advice-for-authors","text":"Drawings Starting from the most basic examples and versions Don\u2019t start with \u201cthis topic is easy\u201d Try to make code easy to understand instead of one-liners Upload images to the website (e.g. to CF) instead of other hosts","title":"General advice for authors"},{"location":"Learning-resources/#things-i-want-to-check-out","text":"https://comscigate.com/Books/contests/icpc.pdf , The Hitchhiker\u2019s Guide Competitive Programming 3, not free!","title":"Things I want to check out"},{"location":"Learning-resources/#categories","text":"Implementation; vectors and sets Binary search Prime sieve; prime check in O(sqrt(N)) Dynamic Programming - Fibonacci numbers, prefix sums Sorting Greedy Ad-hoc Graphs - graph representation, BFS, DFS, trees Geometry - distance between two points Bitmasks Two pointers, sliding window Data structures - sqrt decomposition, segment trees, Fenwick/BIT, persistent structures, Policy-Based-DS, treaps, BST Ternary search Interactive problems LIS LCS Maths Number theory Combinatorics, probability, EV Find & Union Game theory - NIM, Grundy Hashing Strings - KMP, Z Geometry - cross product, convex hull Matrix exponentiation Divide & Conquer DP optimizations Graphs - Dijkstra, FW, SCC, bridges, matching, flows Randomized algorithms TRIE Trees - bottom-up dp, LCA, Centroid decomposition, HLD, DSU 2-SAT Strings - suffix arrays Constructive algorithms Expression parsing Meet in the middle FFT Chinese remainder theorem Gaussian elimination Difference array, binary lifting Solutions for CSES DP problems: https://codeforces.com/blog/entry/70018#comment-545687","title":"Categories"},{"location":"Linux-setup/","text":"Video tutorial: https://youtu.be/ePZEkbbf3fc For competitive programming, I use Ubuntu (a popular free Linux distribution) dual booted alongside Windows. My favorite IDE is Geany and it's perfect for short codes in CP, but I don't recommend it for work and big projects. Here's setup instructions. Download Ubuntu from https://ubuntu.com/download . Create a bootable USB with https://rufus.ie or any other software. Install Ubuntu from your USB, preferably alongside the current OS (like Windows). Install Geany: sudo apt install geany Configure Geany preferences: 5.1. Open preferences with ctrl+alt+P. 5.2. In Keybindings tab, set Switch to Editor as F1 and confirm overriding, then Switch to VTE as F2 (VTE is built-in terminal). 5.3. In Terminal tab, mark Follow path of the current file . Terminal will now automatically change a path after you open a new file. 5.4. (optional) In Editor tab, change Comment toggle marker to an empty string or a single space. Open any C++ file in Geany, go to Build -> Set Build Commands and copy my flags. Compile (F8): g++ -std=c++17 -Wshadow -Wall -o \"%e\" \"%f\" -O2 -Wno-unused-result Build (F9): g++ -std=c++17 -Wshadow -Wall -o \"%e\" \"%f\" -g -fsanitize=address -fsanitize=undefined -D_GLIBCXX_DEBUG If you get compilation errors, try changing from c++17 to c++14 and/or removing sanitizers (two fsanitize flags). If your computer beeps after compilation, unmark Beep on errors in Preferences -> General -> Miscellaneous. Open a file ~/.bashrc and uncomment a line #force_color_prompt=yes in order to get colorful terminal in Geany. Restart geany or run source ~/.bashrc to trigger the change. Optional steps that I use: Hide Toolbar and Sidebar by unmarking them in View . Install Guake and make it run on start-up: sudo apt install guake Activities (top-left corner) -> Startup Applications Preferences -> Add -> set name and command as guake Open system settings (top-right corner of the screen) and mark Auto-hide the Dock in Dock tab. More info and details below. You can install stuff by using Software Center or typing a command in terminal, usually sudo apt install program_name . This should be displayed if you just type geany ( Command 'geany' not found, but can be installed with: sudo apt install geany ). If this doesn't work, I usually google ubuntu how to install program_name from terminal and follow the instructions. Guake allows you to summon a fullscreen terminal by clicking the F12 button, which is more comfortable than a new terminal window that you can open with ctrl+alt+T. It isn't important if you use Geany built-in terminal though. Comment toggle marker refers to a special character added to comments created with shortcut ctrl+E in Geany. The default ~ means that commented lines will look like //~ int a = 2 + 2; . It's ok to get rid of the ~ character. In Preferences -> Interface, you can switch the position of Geany terminal (and message window) between bottom and right. python3 is likely already installed, consider defining python as the same command ( more info ) in terminal: update-alternatives --install /usr/bin/python python /usr/bin/python3 10","title":"Linux setup"},{"location":"Notes-for-lectures/","text":"Lectures in next two weeks: 1. Computations modulo P 2. Binary Expo 3. Matrix Expo 4. Gaussian Elimination 5. EV in a chain 6. Berlekamp-Massey (linear rec) Computations modulo P \u00b6 How to compute 2^N for huge N? It's slow and some languages don't support so big numbers. What about just asking about the last digit of the answer? 2345125235+2394592135*23411111 actually, looking at last digits is enough 517*28 = ....6 How to compute 10^18 * 10^18 modulo P=10^9 + 7 (maybe mention a need for long long?) Today, we will work only with prime modulo, usually, it's P = 10^9 + 7. Show code for factorial, including an incorrect one (modulo only at the end) Why not 2^32? Introduce modulo operator and define it with the remainder (for example 17 mod 5 = 2) Say how easy it is to do all operations BUT subtraction is harder. Mention CPH https://cses.fi/book/book.pdf Mention https://cp-algorithms.com/ and say which topics are easy-medium, the first (binary expo) will be covered in the next lecture, related: modular inverse Say about division and probabilities, maybe mention binomial coefficients at the end, mention CSES problem set: 2^N https://cses.fi/problemset/task/1617 and trailing zeros in N! https://cses.fi/problemset/task/1618 (the latter requires thinking instead of computing things modulo P) idea: maybe make a second video about modular inverse Gaussian Elimination \u00b6 pronounce with 's', not 'sh' solve a system of two equations solve a system of three equations talk about matrix representation show a general algorithm simulate on the same system of three equations precision issues, pivot usually computed modulo P, same but with modular inverse binary version example explained here https://en.wikipedia.org/wiki/Gaussian_elimination practical programming use https://cp-algorithms.com/linear_algebra/linear-system-gauss.html think: does the answer always exist modulo P? x * 1000000007 = 5 has a solution for real values, doesn't for P=1e9+7 Gaussian Elimination problems \u00b6 translate to English https://www.overleaf.com/project/5c7692c919fec4365291d45d https://csacademy.com/contest/round-52/task/an-unstable-graph/statement/ and this is another reason why organizers shouldn't require real values (modulo would prevent my stupid solution BUT maybe the answer wouldn't exist?) prepare \"directed graph, random walk\" on Polygon Matrix Expo \u00b6 https://codeforces.com/contest/1117/problem/D","title":"Notes for lectures"},{"location":"Notes-for-lectures/#computations-modulo-p","text":"How to compute 2^N for huge N? It's slow and some languages don't support so big numbers. What about just asking about the last digit of the answer? 2345125235+2394592135*23411111 actually, looking at last digits is enough 517*28 = ....6 How to compute 10^18 * 10^18 modulo P=10^9 + 7 (maybe mention a need for long long?) Today, we will work only with prime modulo, usually, it's P = 10^9 + 7. Show code for factorial, including an incorrect one (modulo only at the end) Why not 2^32? Introduce modulo operator and define it with the remainder (for example 17 mod 5 = 2) Say how easy it is to do all operations BUT subtraction is harder. Mention CPH https://cses.fi/book/book.pdf Mention https://cp-algorithms.com/ and say which topics are easy-medium, the first (binary expo) will be covered in the next lecture, related: modular inverse Say about division and probabilities, maybe mention binomial coefficients at the end, mention CSES problem set: 2^N https://cses.fi/problemset/task/1617 and trailing zeros in N! https://cses.fi/problemset/task/1618 (the latter requires thinking instead of computing things modulo P) idea: maybe make a second video about modular inverse","title":"Computations modulo P"},{"location":"Notes-for-lectures/#gaussian-elimination","text":"pronounce with 's', not 'sh' solve a system of two equations solve a system of three equations talk about matrix representation show a general algorithm simulate on the same system of three equations precision issues, pivot usually computed modulo P, same but with modular inverse binary version example explained here https://en.wikipedia.org/wiki/Gaussian_elimination practical programming use https://cp-algorithms.com/linear_algebra/linear-system-gauss.html think: does the answer always exist modulo P? x * 1000000007 = 5 has a solution for real values, doesn't for P=1e9+7","title":"Gaussian Elimination"},{"location":"Notes-for-lectures/#gaussian-elimination-problems","text":"translate to English https://www.overleaf.com/project/5c7692c919fec4365291d45d https://csacademy.com/contest/round-52/task/an-unstable-graph/statement/ and this is another reason why organizers shouldn't require real values (modulo would prevent my stupid solution BUT maybe the answer wouldn't exist?) prepare \"directed graph, random walk\" on Polygon","title":"Gaussian Elimination problems"},{"location":"Notes-for-lectures/#matrix-expo","text":"https://codeforces.com/contest/1117/problem/D","title":"Matrix Expo"},{"location":"Plans/","text":"1) Educative giveaway winners - DONE 1b) Edit previous videos description - DONE 2) Fixing chatbot - IMPOSSIBLE 3) Create a page so people could make suggestions (maybe subreddit?) 4) Working on video ideas - PARTIALLY DONE 5) Working on FAQ - PARTIALLY DONE 6) Learning Massey algorithm - DONE 7) figure out some stream layout to display what I'm doing (every 2-3 minutes it should show some info) Lectures \u00b6 DP with bitmasks Computational geometry Trees, graphs Time complexity Iterative segment trees Debugging How to make FFT fast - CF article Combinatorics: permutations and combinations centroid decomposition segment trees (iterative, recursive with lazy, merging Left and Right, bool single=(L==R)) Problems \u00b6 https://atcoder.jp/contests/abc164/tasks/abc164_d - DONE https://www.codechef.com/MAY20A/problems/CHANDF https://leetcode.com/problems/super-egg-drop/ with real video of breaking eggs Other \u00b6 Nick White collab William collab Clement collab How I cheated in Google Kickstart? Shout-out to smaller coding channels \"Algo/coding channels worth watching\" William Lin https://www.youtube.com/channel/UCKuDLsO0Wwef53qdHPjbU2Q - NOT NEEDED, WILL DO A COLLAB retrograd https://www.youtube.com/channel/UCI-n1rZ2qMCz6h53EoEAYlw - DONE algopedia https://www.youtube.com/channel/UC4LyqX6MVkg7NU2qBbvrkSg Stefan Dascalescu https://www.youtube.com/channel/UCyTPeByJ_FvAJljtc0svt-Q VPlanet https://www.youtube.com/channel/UCdNNY8Y8meG3z9Wy6MTzcLg Algorithms Live! https://www.youtube.com/channel/UCBLr7ISa_YDy5qeATupf26w umnik_team https://www.youtube.com/channel/UC3-pkjZ8-D4aW8QfaExuMjw Petr Mitrichev https://www.youtube.com/user/petrmitrichev code_report https://www.youtube.com/channel/UC1kBxkk2bcG78YBX7LMl9pQ takeUForward https://www.youtube.com/channel/UCJskGeByzRRSvmOyZOz61ig (todo: check out this channel) Tozan Southerpacks https://www.youtube.com/channel/UCwsapfci2p1oDVO4Q2sJOQw Rachit Jain https://www.youtube.com/channel/UC9fDC_eBh9e_bogw87DbGKQ - mini_DONE / collab? Gaurav Sen https://www.youtube.com/channel/UCRPMAqdtSgd0Ipeef7iFsKw Code NCode https://www.youtube.com/channel/UC0zvY3yIBQTrSutsV-4yscQ - DONE WilliamFiset https://www.youtube.com/channel/UCD8yeTczadqdARzQUp29PJw Programming Live with Larry https://www.youtube.com/channel/UCl3tJFKsFrw2p_Wxf1YDSow Scott Wu https://www.youtube.com/channel/UCEDv0kTQ4W52mPQkX_F9gug Radoslav Dimitrov https://www.youtube.com/channel/UCYlll_x8crK5AMMQQ9D575w Good statements shitty statement of https://leetcode.com/problems/magical-string/ and my https://codeforces.com/contest/790/problem/A DP on digits harder: https://www.spoj.com/problems/ONEZERO/ - solved in BPS, surprisingly dp or BFS medium-hard: https://codeforces.com/contest/1070/problem/A Not in next 3 months \u00b6 My journey in CP What is competitive programming? LIS Persistent data structures - CF article? Aliens from IOI 2016 (lecture?) 5 simplest/main mistakes in competitive programming Convex hull of lines CHT Sqrt decomposition on trees Mo\u2019s algorithm on tree Kickstart problems https://leetcode.com/problems/increasing-triplet-subsequence/ Matrix exponentiation DP problems from https://cses.fi/problemset/ https://leetcode.com/problems/maximum-gap/ - hard problem similar: Gap from http://apio-olympiad.org/2016/ Finish CP's Handbook CRT lecture Binomial Coefficients modulo prime and an arbitrary number https://cp-algorithms.com/combinatorics/binomial-coefficients.html Streams todo \u00b6 check out https://binarysearch.io/ during a stream try https://play.elevatorsaga.com/ and put highlights on the main channel? Try to manually dock Crew Dragon to the ISS https://iss-sim.spacex.com/ Plans \u00b6 Edit the pinned comment on Facebook/Errichto. Make more lectures. Make a CF round and record making it. Write a Codeforces FAQ. amazon affiliate links in FAQ abandon responding on FB? abandon Twitch? work on chatbot if chatbot isn't enough, think about 25min-work-5min-questions. create a default response in FB Modify old thumbnails? A new account in Polygon? Check out new Windows terminal. Facebook easy problems \u00b6 https://codeforces.com/contest/574/problem/B - count triangles, N, M \u2264 4000 Youtube video in O(X * sqrt(X)) https://leetcode.com/problems/maximum-product-subarray/ - max product subarray Youtube video on Kadane\u2019s algo https://leetcode.com/problems/move-zeroes/ - easy Youtube video on in-place merge sort https://leetcode.com/problems/arithmetic-slices/ - mention \u201ctwo pointers\u201d but solve by changing to the array of differences https://codeforces.com/contest/1088/problem/B Garsia\u2013Wachs algorithm \u00b6 https://atcoder.jp/contests/dp/tasks/dp_n https://atcoder.jp/contests/dp/submissions/3948843 https://www.lydsy.com/JudgeOnline/problem.php?id=3229 Old Current Notes (before 100k stream): \u00b6 add atcoder codes to github repo check out github simulation thing by Ayan polls / betting TODO: figure out live annotations (youtube promoting a stream going live) TODO: keep improving streamelements chatbot TODO: change names of April Leetcode videos TODO: Find a person to handle Linkedin, Subreddit, Facebook, Twitter, Discord, or a mod in general, or an editor (stream highlights!)","title":"Plans"},{"location":"Plans/#lectures","text":"DP with bitmasks Computational geometry Trees, graphs Time complexity Iterative segment trees Debugging How to make FFT fast - CF article Combinatorics: permutations and combinations centroid decomposition segment trees (iterative, recursive with lazy, merging Left and Right, bool single=(L==R))","title":"Lectures"},{"location":"Plans/#problems","text":"https://atcoder.jp/contests/abc164/tasks/abc164_d - DONE https://www.codechef.com/MAY20A/problems/CHANDF https://leetcode.com/problems/super-egg-drop/ with real video of breaking eggs","title":"Problems"},{"location":"Plans/#other","text":"Nick White collab William collab Clement collab How I cheated in Google Kickstart? Shout-out to smaller coding channels \"Algo/coding channels worth watching\" William Lin https://www.youtube.com/channel/UCKuDLsO0Wwef53qdHPjbU2Q - NOT NEEDED, WILL DO A COLLAB retrograd https://www.youtube.com/channel/UCI-n1rZ2qMCz6h53EoEAYlw - DONE algopedia https://www.youtube.com/channel/UC4LyqX6MVkg7NU2qBbvrkSg Stefan Dascalescu https://www.youtube.com/channel/UCyTPeByJ_FvAJljtc0svt-Q VPlanet https://www.youtube.com/channel/UCdNNY8Y8meG3z9Wy6MTzcLg Algorithms Live! https://www.youtube.com/channel/UCBLr7ISa_YDy5qeATupf26w umnik_team https://www.youtube.com/channel/UC3-pkjZ8-D4aW8QfaExuMjw Petr Mitrichev https://www.youtube.com/user/petrmitrichev code_report https://www.youtube.com/channel/UC1kBxkk2bcG78YBX7LMl9pQ takeUForward https://www.youtube.com/channel/UCJskGeByzRRSvmOyZOz61ig (todo: check out this channel) Tozan Southerpacks https://www.youtube.com/channel/UCwsapfci2p1oDVO4Q2sJOQw Rachit Jain https://www.youtube.com/channel/UC9fDC_eBh9e_bogw87DbGKQ - mini_DONE / collab? Gaurav Sen https://www.youtube.com/channel/UCRPMAqdtSgd0Ipeef7iFsKw Code NCode https://www.youtube.com/channel/UC0zvY3yIBQTrSutsV-4yscQ - DONE WilliamFiset https://www.youtube.com/channel/UCD8yeTczadqdARzQUp29PJw Programming Live with Larry https://www.youtube.com/channel/UCl3tJFKsFrw2p_Wxf1YDSow Scott Wu https://www.youtube.com/channel/UCEDv0kTQ4W52mPQkX_F9gug Radoslav Dimitrov https://www.youtube.com/channel/UCYlll_x8crK5AMMQQ9D575w Good statements shitty statement of https://leetcode.com/problems/magical-string/ and my https://codeforces.com/contest/790/problem/A DP on digits harder: https://www.spoj.com/problems/ONEZERO/ - solved in BPS, surprisingly dp or BFS medium-hard: https://codeforces.com/contest/1070/problem/A","title":"Other"},{"location":"Plans/#not-in-next-3-months","text":"My journey in CP What is competitive programming? LIS Persistent data structures - CF article? Aliens from IOI 2016 (lecture?) 5 simplest/main mistakes in competitive programming Convex hull of lines CHT Sqrt decomposition on trees Mo\u2019s algorithm on tree Kickstart problems https://leetcode.com/problems/increasing-triplet-subsequence/ Matrix exponentiation DP problems from https://cses.fi/problemset/ https://leetcode.com/problems/maximum-gap/ - hard problem similar: Gap from http://apio-olympiad.org/2016/ Finish CP's Handbook CRT lecture Binomial Coefficients modulo prime and an arbitrary number https://cp-algorithms.com/combinatorics/binomial-coefficients.html","title":"Not in next 3 months"},{"location":"Plans/#streams-todo","text":"check out https://binarysearch.io/ during a stream try https://play.elevatorsaga.com/ and put highlights on the main channel? Try to manually dock Crew Dragon to the ISS https://iss-sim.spacex.com/","title":"Streams todo"},{"location":"Plans/#plans","text":"Edit the pinned comment on Facebook/Errichto. Make more lectures. Make a CF round and record making it. Write a Codeforces FAQ. amazon affiliate links in FAQ abandon responding on FB? abandon Twitch? work on chatbot if chatbot isn't enough, think about 25min-work-5min-questions. create a default response in FB Modify old thumbnails? A new account in Polygon? Check out new Windows terminal.","title":"Plans"},{"location":"Plans/#facebook-easy-problems","text":"https://codeforces.com/contest/574/problem/B - count triangles, N, M \u2264 4000 Youtube video in O(X * sqrt(X)) https://leetcode.com/problems/maximum-product-subarray/ - max product subarray Youtube video on Kadane\u2019s algo https://leetcode.com/problems/move-zeroes/ - easy Youtube video on in-place merge sort https://leetcode.com/problems/arithmetic-slices/ - mention \u201ctwo pointers\u201d but solve by changing to the array of differences https://codeforces.com/contest/1088/problem/B","title":"Facebook easy problems"},{"location":"Plans/#garsiawachs-algorithm","text":"https://atcoder.jp/contests/dp/tasks/dp_n https://atcoder.jp/contests/dp/submissions/3948843 https://www.lydsy.com/JudgeOnline/problem.php?id=3229","title":"Garsia\u2013Wachs algorithm"},{"location":"Plans/#old-current-notes-before-100k-stream","text":"add atcoder codes to github repo check out github simulation thing by Ayan polls / betting TODO: figure out live annotations (youtube promoting a stream going live) TODO: keep improving streamelements chatbot TODO: change names of April Leetcode videos TODO: Find a person to handle Linkedin, Subreddit, Facebook, Twitter, Discord, or a mod in general, or an editor (stream highlights!)","title":"Old Current Notes (before 100k stream):"},{"location":"State-of-the-channel/","text":"The current state of the channel \u00b6 Short Youtube videos on problems from contests and from coding interviews. Lectures. Problem-solving and boring streams. I care about several things when choosing what to do in my career: \u00b6 helping others (making an impact) money how interesting it is how cool/fun it is effort required GitHub wiki \u00b6 Use this online editor (or something else ). Boring streams \u00b6 Answer CF comments. Find good problems for Youtube videos. Reading various tutorials/materials and see what is nicely explained. Read/prepare materials on coding interviews. Facebook and Twitter \u00b6 Coming contests, interesting articles One-minute videos, then compilation on Youtube Improve the content \u00b6 I need to remember this to improve my videos and streams. General \u00b6 Don't promise. Just do something. Videos \u00b6 Avoid starting sentences with \"so\". Before a stream \u00b6 Make sure the Yeti microphone is on. Change Twitch description. Log out from Facebook. CF/TW/FB ping about a stream. Stop or remove Youtube history? Linux: Mute desktop audio to avoid echo. Linux: Disable flipping in OpenGL to avoid glitches. During a stream \u00b6 Talk with chat during a stream. Keep problem name on the screen while solving a problem, or put a small text box at the bottom. Remember about removing \"BRB\". Outsource creating captions and timestamps.","title":"State of the channel"},{"location":"State-of-the-channel/#the-current-state-of-the-channel","text":"Short Youtube videos on problems from contests and from coding interviews. Lectures. Problem-solving and boring streams.","title":"The current state of the channel"},{"location":"State-of-the-channel/#i-care-about-several-things-when-choosing-what-to-do-in-my-career","text":"helping others (making an impact) money how interesting it is how cool/fun it is effort required","title":"I care about several things when choosing what to do in my career:"},{"location":"State-of-the-channel/#github-wiki","text":"Use this online editor (or something else ).","title":"GitHub wiki"},{"location":"State-of-the-channel/#boring-streams","text":"Answer CF comments. Find good problems for Youtube videos. Reading various tutorials/materials and see what is nicely explained. Read/prepare materials on coding interviews.","title":"Boring streams"},{"location":"State-of-the-channel/#facebook-and-twitter","text":"Coming contests, interesting articles One-minute videos, then compilation on Youtube","title":"Facebook and Twitter"},{"location":"State-of-the-channel/#improve-the-content","text":"I need to remember this to improve my videos and streams.","title":"Improve the content"},{"location":"State-of-the-channel/#general","text":"Don't promise. Just do something.","title":"General"},{"location":"State-of-the-channel/#videos","text":"Avoid starting sentences with \"so\".","title":"Videos"},{"location":"State-of-the-channel/#before-a-stream","text":"Make sure the Yeti microphone is on. Change Twitch description. Log out from Facebook. CF/TW/FB ping about a stream. Stop or remove Youtube history? Linux: Mute desktop audio to avoid echo. Linux: Disable flipping in OpenGL to avoid glitches.","title":"Before a stream"},{"location":"State-of-the-channel/#during-a-stream","text":"Talk with chat during a stream. Keep problem name on the screen while solving a problem, or put a small text box at the bottom. Remember about removing \"BRB\". Outsource creating captions and timestamps.","title":"During a stream"}]}